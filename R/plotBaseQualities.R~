#' @title Plot the Base Qualities for each file
#'
#' @description Plot the Base Qualities for each file as separate plots
#'
#' @details This replicates the \code{Per base sequence quality} plots from FASTQC,
#' using facets to plce them all in a single ggplot2 object.
#'
#' For large datasets, subsetting by R1 or R2 reads may be helpful
#'
#' @param x Can be a \code{FastqcFile}, \code{FastqcFileList}, \code{FastqcData},
#' \code{FastqcDataList} or path
#' @param usePlotly \code{logical} Default \code{FALSE} will render using ggplot.
#' If \code{TRUE} plot will be rendered with plotly
#' @param nc \code{numeric}. The number of columns to create in the plot layout
#' @param warn,fail The default values for warn and fail are 5 and 10 respectively (i.e. precentages)
#' @param pwfCols Object of class \code{\link{PwfCols}} containing the colours for PASS/WARN/FAIL
#' @param labels An optional named vector of labels for the file names.
#' All filenames must be present in the names.
#' File extensions are dropped by default.
#' @param ... Used to pass additional attributes to theme() and between methods
#'
#' @return A standard ggplot2 object
#'
#' @examples
#'
#' # Get the files included with the package
#' barcodes <- c("ATTG", "CCGC", "CCGT", "GACC", "TTAT", "TTGG")
#' suffix <- c("R1_fastqc.zip", "R2_fastqc.zip")
#' fileList <- paste(rep(barcodes, each = 2), rep(suffix, times = 5), sep = "_")
#' fileList <- system.file("extdata", fileList, package = "ngsReports")
#'
#' # Load the FASTQC data as a FastqcDataList
#' fdl <- getFastqcData(fileList)
#'
#' # The default and subset plot
#' plotBaseQualities(fdl)
#'
#'
#' @importFrom ggplot2 ggplot
#' @importFrom ggplot2 aes
#' @importFrom ggplot2 annotate
#' @importFrom ggplot2 geom_crossbar
#' @importFrom ggplot2 geom_segment
#' @importFrom ggplot2 geom_linerange
#' @importFrom ggplot2 geom_line
#' @importFrom ggplot2 scale_x_continuous
#' @importFrom ggplot2 scale_y_continuous
#' @importFrom ggplot2 xlab
#' @importFrom ggplot2 ylab
#' @importFrom ggplot2 facet_wrap
#' @importFrom ggplot2 theme_bw
#' @importFrom ggplot2 theme
#' @importFrom ggplot2 element_blank
#' @importFrom ggplot2 element_text
#' @importFrom plotly ggplotly
#'
#' @export
plotBaseQualities <- function(x, usePlotly = FALSE, labels, nc = 2,
                              pwfCols, warn = 30, fail = 20){

  # Get the data
  df <- tryCatch(Per_base_sequence_quality(x))
  df <- dplyr::mutate(df,
                      Start = gsub("([0-9]*)-[0-9]*", "\\1", Base),
                      Start = as.integer(Start),
                      Start = as.factor(Start))

  # Sort out the colours
  if (missing(pwfCols)) pwfCols <- ngsReports::pwf
  stopifnot(isValidPwf(pwfCols))
  cols <- getColours(pwfCols)

  # Drop the suffix, or check the alternate labels
  if (missing(labels)){
    labels <- structure(gsub(".(fastq|fq|bam).*", "", unique(df$Filename)), names = unique(df$Filename))
  }
  else{
    if (!all(unique(df$Filename) %in% names(labels))) stop("All file names must be included as names in the vector of labels")
  }
  if (length(unique(labels)) != length(labels)) stop("The labels vector cannot contain repeated values")

  # Set the y limit
  ylim <- c(0, max(df$`90th_Percentile`) + 1)

  # Get the Illumina encoding
  enc <- Basic_Statistics(x)$Encoding[1]
  enc <- gsub(".*(Illumina [0-9\\.]*)", "\\1", enc)

  qualPlot <- ggplot(df, aes(x = as.integer(Start), y = Median)) +
    annotate("rect", xmin = -Inf, xmax = Inf, ymin = warn, ymax = Inf,
                      fill = getColours(pwfCols)["PASS"], alpha = 0.3) +
    annotate("rect", xmin = -Inf, xmax = Inf, ymin = fail, ymax = warn,
                      fill = getColours(pwfCols)["WARN"], alpha = 0.3) +
    annotate("rect", xmin = -Inf, xmax = Inf, ymin = -Inf, ymax = fail,
                      fill = getColours(pwfCols)["FAIL"], alpha = 0.3) +
    geom_crossbar(aes(ymin = Lower_Quartile, ymax = Upper_Quartile),
                           fill = "yellow", width = 0.8, size = 0.2) +
    geom_segment(aes(x = as.integer(Start)-0.4, xend = as.integer(Start) + 0.4,
                                       yend = Median), colour = "red") +
    geom_linerange(aes(ymin = `10th_Percentile`, ymax = Lower_Quartile)) +
    geom_linerange(aes(ymin = Upper_Quartile, ymax = `90th_Percentile`)) +
    geom_line(aes(y = Mean), colour = "blue") +
    scale_x_continuous(breaks = seq_along(levels(df$Start)),
                                labels = unique(df$Base),
                                expand = c(0, 0)) +
    scale_y_continuous(limits = ylim, expand = c(0,0)) +
    xlab("Position in read (bp)") +
    ylab(paste0("Quality Scores (", enc, " encoding)")) +
    facet_wrap(~Filename, ncol = nc) +
    theme_bw() +
    theme(panel.grid.minor = element_blank(),
                   axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5))

  if(usePlotly){
  qualPlot <- qualPlot + xlab("")
  qualPlot <- ggplotly(qualPlot)
  }

  qualPlot
}

